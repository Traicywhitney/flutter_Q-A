class AppData {
  String question;
  String answer;

  AppData(this.question, this.answer);
}

List<AppData> AppDataList = [
  AppData('1.Flutter',
      '\ni) OpenSource UI software development kit.\n\nii) Created by Google and now managed by ECMA( European Computer Manufacturers Association).\n\niii) It is used to develop cross platform applications from a single code base.\n\niv) Flutter uses the Dart programming language. It provides a simple, powerful, efficient, and easy-to-understand SDK.\n\nv) Flutter has a hot reload feature that allows developers to see the changes in real-time, without having to rebuild the entire app.'),
  AppData('Why flutter uses Dart',
      '\nSmooth Animation.\nCompilation and Execution in dart.\nHot Reload.\n'),
  AppData(
      '2.Architecture','\nIt consist of three layer \n i)The FrameWork Layer \n ii)The Engine Layer \n iii)The Embedder Layer \n\nThe framework layer is the part where most developers can interact with Flutter. The Flutter framework provides a reactive and modern framework that is written in Dart\n\nThe engine layer is written in C/C++, and it takes care of the input, output, network requests, and handles the difficult translation of rendering whenever a frame needs to be painted.\n     Flutter uses Skia as its rendering engine and it is revealed to the Flutter framework through the dart : ui, which wraps the principal C++ code in Dart classes.\n\nAn entry point is provided by a platform-specific embedder, which coordinates with the underlying operating system to access services such as accessibility, rendering surfaces, and input.The embedder is written in a platform-specific language,\n   *Java and C++ for Android,\n   *Objective-C/Objective-C++ for iOS and macOS,\n   *C++ for Windows and Linux.'),
  AppData('Build Modes',
      '\nThe flutter tooling supports three modes when compiling your app.\n\nThree debug modes are \ni)Debug \nii)Testing \niii)Release  \n\n\nProfile mode'),
 AppData('3.Widget', 'Each element on a screen of the Flutter app is a widget.\nThe view of the screen completely depends upon the choice and sequence of the widgets used to build the apps.\n\nTypes of widgets  \n        StatelessWidget \n        StatefulWidget '
     '\nThe StatelessWidget does not have any state information. It remains static throughout its lifecycle. The examples of the StatelessWidget are Text, Row, Column, Container, etc.\n\nA StatefulWidget has state information. It contains mainly two classes: the state object and the widget. It is dynamic because it can change the inner data during the widget lifetime. This widget does not have a build() method. It has createState() method, which returns a class that extends the Flutters State Class. The examples of the StatefulWidget are Checkbox, Radio, Slider, InkWell, Form, and TextField'),
  AppData('4.Best Editors',
      '\nIt enables development for designing and debugging apps.\n\ni)Android Stdio\nii)Visual Stdio \niii)E-mac \niv)Xcode \nv)Vim,Etc'),
  AppData('5.Dart','\nDart is a programming language designed by Lars Bak and Kasper Lund and developed by Google in 2011.\n\nDart is an object-oriented client-optimized programming language used to build mobile and web applications on various platforms.\n\nIt has easy-to-use applications that can be utilized to work on both the user and server end.\n\nDart employs C-style syntax and is mainly used to create front-end user interfaces for mobile applications.\n\n\nThe full form of DART is "Dynamic Analysis and Response Team".'),
  AppData('6.Stateless widget', '\n1.Sateless widget are static widget.\n2.The widget whose state can not be altered once they are built are called stateless widgets.\n 3.These widgets are immutable once they are built i.e any amount of change in the variables,icons,buttons,or retrieving data can not change the state of the app.\n4.Stateless widget overrides the build() method and returns a widget.\n5.It is used when the UI depends on the information within the object itself.Some examples are Text,RaisedButton,IconButtons.'),
  AppData('7.Stateful widget', '1. Stateful widget are dynamic widget.\n2.The widgets whose state can be altered once they are built are called stateful widgets.\n3.These states are mutable and can be changed multiple times with different sets of variables,inputs,and data.\n4. Stateful widget overrides the createState() method and returns a state.\n5.It is used when the UI can change dynamically.Some examples are checkBox,radioButton,Form,TextField.'),
  AppData('8.const', 'Known at Compile-Time: Values declared with const must be known and calculable at compile-time. This means their values are determined when the code is written, not when it/s executed.\nLimited Types: const is typically used with literals and instances of classes that have a const constructor. This restricts the types of values that can be declared as const.\nCompile-Time Object: Objects declared with const are created at compile-time. This can lead to more efficient code because the values are known in advance.'),
  AppData('9.final', 'Known at Runtime: Values declared with final are determined at runtime. This means you can calculate or assign the value during the execution of the program.\nMore Flexible: final is more flexible than const in terms of the types of values it can hold. You can use final with values that are not known until runtime.\nRuntime Object: Objects declared with final are created when they are first accessed and assigned. This allows for more dynamic behavior.'),
  AppData('10.Single_Child Layout Widgets',
      '\n * A widget that aligns its child within itself and optionally sizes itself based on the child/s size.\n* A widget that attempts to size the child to a specific aspect ratio.\n* Container that positions its child according to the child/s baseline.\n\n Ex of Single_child Widgets \n\n* Align, Aspect Ratio, OverflowBox \n* Baseline, Center, Offstage \n* ConstrainedBox, Container, LimitedBox\n* CustomsingleChildLayout, SizedBox\n* Expanded, FittedBox, Padding\n* SizedOverflowBox, Transform.'),
  AppData('11.Multi_Child Layout Widgets',
      '\n The multiple child widgets are a type of widget, which contains more than one child widget, and the layout of these widgets are unique.\n\n For example \n\n* Row widget laying out of its child\nwidget in a horizontal direction \n* Column widget laying out of its child\nwidget in a vertical direction.\n\nEx of Multi-Child Widgets \n\n* Column, CustomMultiChildLayout,\n* Flow, GridView, ListBody,\n * IndexedStack,\n * LayoutBuilder,\n * ListView, Row,\n* Stack, Table, Wrap.'),
  AppData('12.await','The “await” keyword is used to wait for the result of an asynchronous operation before proceeding to the next line of code.\nIt allows the main flow of the program to continue executing while the operation is being carried out in the background.'),
  AppData('13.async','The “async” keyword is used to designate a function as asynchronous.This means that the program will run independently of this function, even if it takes some time to complete.\nEssentially, it signals to the computer that this function should run asynchronously.'),
];
